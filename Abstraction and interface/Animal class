

public abstract class Animal
{
    protected int legs;
    protected Animal(int legs)
    {
        this.legs = legs;
    }
    abstract void eat();
    public void walk()
    {
        System.out.println( " is walking with "+legs+" legs");
    }
}
class Spider extends Animal
{
    public Spider(int legs)
    {
        super(legs);
    }
    @Override
    void eat() {
        System.out.println("Spider is eating ");
    }
}
interface Pet
{
    public void setName(String name);
    public String getName();
    public void play();
}
class cat extends Animal implements Pet{
String name;
    public cat(String name)
    {
        super(4);
        this.name = name;

    }

    public cat() {
        this("");
    }

    @Override
    void eat() {
        System.out.println("Cat is eating");
    }

    @Override
    public void setName(String name) {
    this.name = name;
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public void play() {
        System.out.println(name+" is playing");
    }
}
class Fish extends Animal implements Pet
{

     String name;

    public Fish(String name) {
        super(0);
        this.name = name;
    }
    public Fish()
    {
        this("");
    }



    @Override
    public void walk() {
        System.out.println("Fish can not walk because it doesnt have legs");
    }

    @Override
    void eat() {
        System.out.println(name+" is eating");
    }

    @Override
    public void setName(String name) {
this.name = name;    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public void play() {
        System.out.println(this.name+ " is playing");
    }
}
